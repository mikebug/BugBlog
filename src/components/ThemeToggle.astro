<button id="theme-toggle" aria-label="Toggle theme">Light ‚òÄÔ∏è Mode</button>

<script>
  // Initialize theme handling
  function getInitialTheme() {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  }

  function applyTheme(theme) {
    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
  }

  function toggleTheme() {
    const currentTheme = localStorage.getItem("theme") || "light";
    const newTheme = currentTheme === "dark" ? "light" : "dark";
    applyTheme(newTheme);
    return newTheme;
  }

  // Initialize theme as early as possible
  function initializeTheme() {
    const initialTheme = getInitialTheme();
    applyTheme(initialTheme);
    updateButtonText(initialTheme);
  }

  function updateButtonText(theme) {
    const button = document.getElementById("theme-toggle");
    if (button) {
      button.textContent = `${theme === "dark" ? "Light ‚òÄÔ∏è" : "Dark üåô"} Mode`;
    }
  }

  // Attach event listener to theme toggle button
  function attachThemeToggleListener() {
    const themeToggle = document.getElementById("theme-toggle");
    if (themeToggle) {
      themeToggle.addEventListener("click", () => {
        const newTheme = toggleTheme();
        updateButtonText(newTheme);
      });
    }
  }

  // Execute when document is ready
  if (document.readyState !== "loading") {
    initializeTheme();
    attachThemeToggleListener();
  } else {
    document.addEventListener("DOMContentLoaded", () => {
      initializeTheme();
      attachThemeToggleListener();
    });
  }

  // Handle theme during Astro view transitions
  document.addEventListener("astro:after-swap", () => {
    const currentTheme = localStorage.getItem("theme");
    if (currentTheme) {
      applyTheme(currentTheme);
      updateButtonText(currentTheme);
    }
    attachThemeToggleListener();
  });
</script>

<style>
  #theme-toggle {
    width: 150px;
    height: 50px;
    font-size: 1rem;
    font-weight: bold;
    border: none;
    border-radius: 25px;
    cursor: pointer;
    background: linear-gradient(
      135deg,
      var(--accent, #4f46e5),
      var(--secondary-color, #7c3aed)
    );
    color: var(--background, #ffffff);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease,
      background 0.3s ease;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  #theme-toggle:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
  }

  #theme-toggle:active {
    transform: translateY(0);
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
  }

  #theme-toggle:focus {
    outline: 3px solid var(--accent, #4f46e5);
    outline-offset: 2px;
  }
</style>
